// Prisma schema for NextAuth with PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("id")
  name          String?   @map("name")
  email         String?   @unique @map("email")
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("image")
  password      String?   @map("password")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts  Account[]
  sessions  Session[]

  // Relations for app domain
  projects  ProjectMember[]
  tasks     Task[]    @relation("AssignedTasks")
  comments  Comment[]
  // inviter relation (optional)
  sentInvitations Invitation[] @relation("InvitedByUser")
  messages ChatMessage[]

  // One-to-one GitHub token relation
  githubToken GitHubToken?

  // Projects owned by this user
  ownedProjects Project[] @relation("ProjectOwner")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid()) @map("id")
  userId            String   @map("user_id")
  type              String   @map("type")
  provider          String   @map("provider")
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text @map("refresh_token")
  access_token      String?  @db.Text @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?  @map("scope")
  id_token          String?  @db.Text @map("id_token")
  session_state     String?  @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =====================
// App domain models
// =====================

model Project {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  ownerId     String?
  owner       User?            @relation("ProjectOwner", fields: [ownerId], references: [id])

  tasks   Task[]
  members ProjectMember[]
  invitations Invitation[]
  messages ChatMessage[]

  // GitHub integration
  repoName                 String?
  repoOwner                String?
  repoUrl                  String?
  githubIntegrationEnabled Boolean      @default(false)
}

model ProjectMember {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  role      String  // "admin", "member"

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      String       @default("todo")
  priority    String       @default("medium")
  dueDate     DateTime?
  projectId   String
  assigneeId  String?
  createdAt   DateTime     @default(now())
  sortOrder   Int          @default(0)

  project   Project  @relation(fields: [projectId], references: [id])
  assignee  User?    @relation("AssignedTasks", fields: [assigneeId], references: [id])
  comments  Comment[]
  labels    Label[]  @relation("TaskLabels")
  attachments Attachment[]

  @@index([projectId, status, sortOrder])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Label {
  id    String @id @default(cuid())
  name  String @unique
  color String

  tasks Task[] @relation("TaskLabels")
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  fileType   String
  taskId     String
  uploadedAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id])
}

// Invitations for project membership that require user acceptance
model Invitation {
  id        String   @id @default(cuid())
  email     String
  projectId String
  role      String   @default("member")
  token     String   @unique
  status    String   @default("pending") // pending | accepted | revoked | expired
  invitedBy String?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  project   Project @relation(fields: [projectId], references: [id])
  invitedByUser User? @relation("InvitedByUser", fields: [invitedBy], references: [id])

  @@index([email])
  @@index([projectId])
  @@unique([email, projectId, status])
}

// Real-time chat messages per project
model ChatMessage {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id])
  content    String?
  fileUrl    String?
  fileType   String?
  createdAt  DateTime @default(now())

  @@index([projectId, createdAt])
}


// Secure storage for user's GitHub access token (encrypted at rest)
model GitHubToken {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  // AES-GCM or similar encryption: store ciphertext and IV separately
  encryptedAccessToken   String   @db.Text
  iv                     String   // base64-encoded IV/nonce
  authTag                String   // base64-encoded GCM auth tag
  tokenType              String?
  scope                  String?
  expiresAt              DateTime?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

